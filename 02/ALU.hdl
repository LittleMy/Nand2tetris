// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put your code here.

// Si zx=1 entonces hace x=0
	Mux16(a=x, b=false, sel=zx, out=x1);
// Si nx=1 entonces hace x=!x 
	Not16(in=x1, out=nx1);
	Mux16(a=x1, b=nx1, sel=nx, out=outx);
// Si zy=1 entonces hace y=0
	Mux16(a=y, b=false, sel=zy, out=y1);
// Si ny=1 entonces hace y=!y
	Not16(in=y1, out=ny1);
	Mux16(a=y1, b=ny1, sel=ny, out=outy);
// Hace & de x e y
	And16(a=outx,b=outy, out=andxy);
// Hace + de x e y
        Add16(a=outx,b=outy,out=sumxy); 
// Si f=1 entonces out=x+y
	Mux16(a=andxy, b=sumxy, sel=f, out=w1);
// Si no=1 entonces out=!out
	Not16(in=w1, out=nw1);
	Mux16(a=w1, b=nw1, sel=no, out=w2);

// Si out=0 entonces zr=1
// Compara los 16 elementos de la salida, para ver si son todos ceros
	Or16Way(in=w2, out=tc);
// Finalmente, zr=1 si out=0
	Mux(a=true, b=false, sel=tc, out=zr);
// Si out<0 entonces ng=1
// Chequea que el primer bit de la salida sea 1
	Neg(in=w2, out=neg);
// Si el primer bit es 1, entonces out<0, luego ng=1
	Mux(a=false, b=true, sel=neg, out=ng); 
// Finalmente da la salida
	Or16(a=w2, b=false, out=out);

}
